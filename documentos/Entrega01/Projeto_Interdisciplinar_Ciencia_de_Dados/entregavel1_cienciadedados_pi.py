# -*- coding: utf-8 -*-
"""Entregavel1_CienciadeDados_PI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16bRxTz1aARPWrqLNKtVXElMJ4n5GyGHC

**Coletando dados Iniciais**

https://edufecap-my.sharepoint.com/:w:/g/personal/vitoria_silva7_edu_fecap_br/EbAa6NyeSZ5HldpBj_wowEMBxBYFj2i7zEIUdNb1MxmVlg?e=7LGLIw
"""

import pandas as pd

PicMoney_BaseTransacoes = "PicMoney_Base_Transacoes_Categorias_Corrigidas.csv"
PicMoney_BasePlayers = "PicMoney-BaseCadastraldePlayers.csv"
PicMoney_BaseAvPaulista = "PicMoney-BasePedestresAvPaulista.csv"
PicMoney_BaseLojas = "PicMoney-MassadeTestecomLojaseValores.csv"
PicMoney_BaseTransacoes_Original = "PicMoney_BasedeTransacoes.csv"

dfTransacoes = pd.read_csv(PicMoney_BaseTransacoes, sep=';')
dfPlayers = pd.read_csv(PicMoney_BasePlayers, sep=';')
dfPaulista = pd.read_csv(PicMoney_BaseAvPaulista, sep=';')
dfLojas = pd.read_csv(PicMoney_BaseLojas, sep=';')
dfTransacoes_Original = pd.read_csv(PicMoney_BaseTransacoes_Original, sep=';', encoding='latin1')

colunasTransacoes = ["data","hora","bairro_estabelecimento","categoria_estabelecimento","tipo_cupom","valor_cupom","repasse_picmoney"]
colunasPlayers = ["bairro_residencial", "idade", "sexo"]
colunasLojas = ["tipo_cupom", "local_captura", "endereco_loja"]
colunasPedestreAvPaulista = ["possui_app_picmoney"]

dfSelTransacoes = dfTransacoes[colunasTransacoes].copy()
dfSelPlayers = dfPlayers[colunasPlayers].copy()
dfSelLojas = dfLojas[colunasLojas].copy()
dfSelPesdestreAvPaulista = dfPaulista[colunasPedestreAvPaulista].copy()

print("Dados que vamos utilizar na base PicMoney_BaseTransacoes: \n\n", dfSelTransacoes.head())
print("\n\nDados que vamos utilizar na base PicMoney_BasePlayers: \n\n", dfSelPlayers.head())
print("\n\nDados que vamos utilizar na base PicMoney_BaseLojas: \n\n", dfSelLojas.head())
print("\n\nDados que vamos utilizar na base PicMoney_BasePedestresAvPaulista: \n\n", dfSelPesdestreAvPaulista.head())

"""**Explorando os Dados**

https://edufecap-my.sharepoint.com/:w:/g/personal/vitoria_silva7_edu_fecap_br/EYAsXB7GYCZHg-OuFeoSH2gBgSY4Yp68MZR2BBD_CvjpPA?e=hbgtz0

**Configurando e Padronizando Estilização das Análises**
"""

import matplotlib.pyplot as plt
import seaborn as sns

COR_FUNDO = '#424242'
COR_TEXTO = 'white'
PALETA_CORES = ['#6CC031', '#001B22', '#006655', '#0892A5', '#A3A3A3']
TAMANHO_FIGURA = (12, 7)
TITULO_FONTSIZE = 16
LABEL_FONTSIZE = 12

def estilizacao_padrao(ax, fig, titulo, xlabel, ylabel):
    """Aplica um tema escuro padronizado a um gráfico Matplotlib."""
    fig.patch.set_facecolor(COR_FUNDO)
    ax.set_facecolor(COR_FUNDO)

    ax.set_title(titulo, color=COR_TEXTO, fontsize=TITULO_FONTSIZE, pad=20)
    ax.set_xlabel(xlabel, color=COR_TEXTO, fontsize=LABEL_FONTSIZE)
    ax.set_ylabel(ylabel, color=COR_TEXTO, fontsize=LABEL_FONTSIZE)

    ax.tick_params(axis='x', colors=COR_TEXTO)
    ax.tick_params(axis='y', colors=COR_TEXTO)

    ax.spines['bottom'].set_color(COR_TEXTO)
    ax.spines['left'].set_color(COR_TEXTO)
    ax.spines['top'].set_color(COR_FUNDO)
    ax.spines['right'].set_color(COR_FUNDO)

"""**Análise Exploratória: Receita por Tipo de Cupom**"""

sns.set_style('ticks')
fig, ax = plt.subplots(figsize=(15, 5))
minha_paleta = ['#6CC031', '#001B22', '#006655']
cor_texto = 'white'
cor_fundo = '#424242'
fig.patch.set_facecolor(cor_fundo)
ax.set_facecolor(cor_fundo)

dfSelTransacoes['receita_picmoney'] = dfSelTransacoes['valor_cupom'] - dfSelTransacoes['repasse_picmoney']

receita_por_cupom = dfSelTransacoes.groupby('tipo_cupom')['receita_picmoney'].sum().sort_values(ascending=False)

print("\nReceita Total por Tipo de Cupom:")
tabela_formatada = receita_por_cupom.reset_index()
tabela_formatada = tabela_formatada.rename(columns={
    'tipo_cupom': 'Tipo de Cupom',
    'receita_picmoney': 'Receita'
})
print(tabela_formatada.to_string(index=False))

receita_por_cupom.plot(kind='barh', color=minha_paleta, ax=ax)
plt.title('Receita da PicMoney por Tipo de Cupom', color=cor_texto, fontsize=16)
plt.xlabel('Receita Total (R$MM)', color=cor_texto, fontsize=12)
plt.ylabel('Tipo de Cupom', color=cor_texto, fontsize=12)

ax.tick_params(axis='x', colors=cor_texto)
ax.tick_params(axis='y', colors=cor_texto)

ax.spines['bottom'].set_color(cor_texto)
ax.spines['left'].set_color(cor_texto)
ax.spines['top'].set_color(cor_fundo)
ax.spines['right'].set_color(cor_fundo)

plt.show()

"""**Análise Exploratória: Penetração do App na Avenida Paulista**"""

COR_FUNDO = '#424242'
COR_TEXTO = 'white'
PALETA_CORES_PIE = ['#6CC031', '#001B22']
TAMANHO_FIGURA = (12, 7)
TITULO_FONTSIZE = 16

contagem_app = dfSelPesdestreAvPaulista['possui_app_picmoney'].value_counts()
tabela_contagem = contagem_app.reset_index()
tabela_contagem.columns = ['Possui o App', 'Quantidade de Pessoas']
print("\nContagem de Players:")
print(tabela_contagem.to_string(index=False))

penetracao_app_percentual = dfSelPesdestreAvPaulista['possui_app_picmoney'].value_counts(normalize=True)

fig, ax = plt.subplots(figsize=TAMANHO_FIGURA)
fig.patch.set_facecolor(COR_FUNDO)
penetracao_app_percentual.plot(kind='pie',
                               autopct='%.1f%%',
                               colors=PALETA_CORES_PIE,
                               ax=ax,
                               textprops={'color':"w", 'fontsize': 14, 'weight': 'bold'})
ax.set_title('Proporção de Pedestres na Av. Paulista que Possuem o App PicMoney',
             color=COR_TEXTO,
             fontsize=TITULO_FONTSIZE,
             pad=20)
ax.set_ylabel('')

plt.show()

"""**Análise Exploratória: Repasse Médio por Categoria**"""

repasse_medio_categoria = dfSelTransacoes.groupby('categoria_estabelecimento')['repasse_picmoney'].mean().sort_values(ascending=False)

tabela_repasse = repasse_medio_categoria.reset_index()
tabela_repasse.columns = ['Categoria', 'Média de Repasse']
tabela_repasse['Média de Repasse'] = tabela_repasse['Média de Repasse'].round(2)
print("\nRepasse Médio por Categoria:\n")
print(tabela_repasse.to_string(index=False))

fig, ax = plt.subplots(figsize=(15, 8))
sns.barplot(x=repasse_medio_categoria.index, y=repasse_medio_categoria.values, palette=PALETA_CORES, ax=ax)
estilizacao_padrao(ax, fig, 'Valor Médio de Repasse por Categoria', 'Categoria', 'Valor Médio do Repasse (R$)')
plt.xticks(rotation=45, ha='right')

plt.show()

"""**Análise Exploratória: Evolução da Receita Diária**"""

print("Evolução da Receita Diária:")
dfSelTransacoes['data_formatada'] = pd.to_datetime(dfSelTransacoes['data'], dayfirst=True, errors='coerce')
receita_diaria = dfSelTransacoes.groupby(dfSelTransacoes['data_formatada'].dt.date)['receita_picmoney'].sum()
tabela_receita_diaria = receita_diaria.reset_index()
tabela_receita_diaria.columns = ['Data', 'Receita']
tabela_receita_diaria['Receita'] = tabela_receita_diaria['Receita'].round(2)
print(tabela_receita_diaria.to_string(index=False))

fig, ax = plt.subplots(figsize=TAMANHO_FIGURA)
receita_diaria.plot(kind='line', marker='o', linestyle='-', color=PALETA_CORES[0], ax=ax)
estilizacao_padrao(ax, fig, 'Evolução da Receita Diária da PicMoney', 'Dia', 'Receita Total (R$MM)')
ax.grid(True, which='both', linestyle='--', linewidth=0.5, color='#A3A3A3')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

plt.show()

"""**Análise Exploratória: Perfil Demográfico dos Usuários**"""

print("\nEstatísticas da Idade dos Usuários:")
estatisticas_idade = dfSelPlayers['idade'].describe()
estatisticas_formatadas = estatisticas_idade.round(0).astype(int)
print(estatisticas_formatadas)

fig, ax = plt.subplots(figsize=TAMANHO_FIGURA)

sns.histplot(
    data=dfSelPlayers,
    x='idade',
    hue='sexo',
    multiple='stack',
    palette='viridis',
    ax=ax
)

estilizacao_padrao(ax, fig, 'Perfil Demográfico dos Usuários por Idade e Sexo', 'Idade', 'Contagem de Usuários')
ax.grid(True, which='both', linestyle='--', linewidth=0.5, color='#A3A3A3')

plt.show()

"""**Verificação da Qualidade dos Dados**

https://edufecap-my.sharepoint.com/:w:/g/personal/vitoria_silva7_edu_fecap_br/ES_id_4qnt5IknB9Fj61-ZwBrmyvhc-VQ2dbYNL0kE_thQ?e=6WPxRZ

**Qualidade dos Dados: Verificação de Consistência Semântica (Categoria vs Estabelecimento)**
"""

print("Colunas da Base Transações:")
print(dfTransacoes_Original.columns)
print("\n\n Primeiras Linhas:")
print(dfTransacoes_Original.head())

estabelecimentos_para_checar = ['Outback', 'Mcdonald', 'Starbucks', 'Cobasi', 'Ipiranga']
evidencias = pd.DataFrame()

for nome in estabelecimentos_para_checar:
    if 'nome_estabelecimento' in dfTransacoes_Original.columns and 'categoria_estabelecimento' in dfTransacoes_Original.columns:
        filtro = dfTransacoes_Original[dfTransacoes_Original['nome_estabelecimento'].str.contains(nome, case=False, na=False)]

        if not filtro.empty:
            amostra = filtro[['nome_estabelecimento', 'categoria_estabelecimento']].drop_duplicates().head(2)
            evidencias = pd.concat([evidencias, amostra])

if not evidencias.empty:
    print("\n\nAmostra de categorias inconsistentes encontradas:")
    print(evidencias.to_string(index=False))
else:
    print("\n\nNenhum dos estabelecimentos de exemplo foi encontrado.")

"""**Qualidade dos Dados: Verificação de Coerência Geográfica (Latitude e Longitude)**"""

print("Primeiras linhas da base de pedestres: ")
print(dfPaulista[['latitude', 'longitude']].head())
print("\nDemonstração de alguns dos dados incoerentes:")

for index, row in dfPaulista.head(3).iterrows():
    lat = row['latitude']
    lon = row['longitude']
    url = f"https://www.google.com/maps/search/?api=1&query={lat},{lon}"
    print(f"Amostra da Linha {index}:")
    print(f"Coordenadas no arquivo: Latitude={lat}, Longitude={lon}")
    print(f"Verifique no mapa: {url}")

"""**Qualidade dos Dados: Verificação de Duplicatas (Telefone na Base de Pedestres)**"""

try:
    df_para_checar = pd.read_csv(dfPaulista, sep=';', encoding='latin1')
    celular = df_para_checar.columns[0]
    duplicatas = df_para_checar[df_para_checar.duplicated(subset=[celular], keep=False)]
    print(f"\nVerificando duplicatas em '{dfPaulista}' na coluna tratada como chave-primária '{celular}':")

    if not duplicatas.empty:
        print(f"\nDuplicatas encontradas: {len(duplicatas)}.")
        print("Amostra de duplicatas:\n")
        print(duplicatas.sort_values(by=celular).head(20).to_string())
    else:
        print("\nNenhuma duplicata encontrada na primeira coluna.")

except FileNotFoundError:
    print(f"\nERRO: O arquivo '{dfPaulista}' não foi encontrado no seu ambiente.")